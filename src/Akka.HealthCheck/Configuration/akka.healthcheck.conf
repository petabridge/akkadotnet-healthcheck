############################################
# Akka.HealthCheck Reference Config File   #
############################################

akka.healthcheck{
	liveness{
		# The default IProbeProvider implementation used for executing
		# liveness checks inside Akka.Healtcheck. Can be overridden by
		# end-users via a custom IProbeProvider implementation. 
		#
		# Supply your fully qualified name (FQN) here to override it.
		provider = "Akka.HealthCheck.Liveness.DefaultLivenessProvider, Akka.HealthCheck"

		# Defines the signaling mechanism used to communicate with K8s, AWS, Azure,
		# or whatever the hosting environment is for the Akka.NET application. The
		# accepted values are 'file', 'tcp', and 'custom'.
		#
		# In the event of a custom transport (which is the default), Akka.HealthCheck
		# won't try to automatically report any probe data to any medium. It's up
		# to the end-user to query that data directly from the AkkaHealthCheck
		# ActorSystem extension.
		transport = custom

		# If the `transport` used is `file`, this is where we specify the path of the file
		# that we will write status data to. It's strongly recommended that you use an 
		# absolute path for best results.
		file.path = "liveness.txt"

		# If the `transport` used is `tcp`, this is where we specify the port # of the inbound
		# socket that we're going open in order to accept external healthcheck connections.
		tcp.port = 11000
	}

	readiness{
		# The default IProbeProvider implementation used for executing
		# readiness checks inside Akka.Healtcheck. Can be overridden by
		# end-users via a custom IProbeProvider implementation. 
		#
		# Supply your fully qualified name (FQN) here to override it.
		provider = "Akka.HealthCheck.Readiness.DefaultReadinessProvider, Akka.HealthCheck"

		# Defines the signaling mechanism used to communicate with K8s, AWS, Azure,
		# or whatever the hosting environment is for the Akka.NET application. The
		# accepted values are 'file', 'tcp', and 'custom'.
		#
		# In the event of a custom transport (which is the default), Akka.HealthCheck
		# won't try to automatically report any probe data to any medium. It's up
		# to the end-user to query that data directly from the AkkaHealthCheck
		# ActorSystem extension.
		transport = custom

		# If the `transport` used is `file`, this is where we specify the path of the file
		# that we will write status data to. It's strongly recommended that you use an 
		# absolute path for best results.
		file.path = "readiness.txt"

		# If the `transport` used is `tcp`, this is where we specify the port # of the inbound
		# socket that we're going open in order to accept external healthcheck connections.
		tcp.port = 11001
	}
}