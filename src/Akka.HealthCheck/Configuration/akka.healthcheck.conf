############################################
# Akka.HealthCheck Reference Config File   #
############################################

akka.healthcheck{
	# Log the complete configuration at INFO level when the actor system is started.
	# This is useful when you are uncertain of what configuration is used.
	log-config-on-start = on
  
	# Log Liveness and Readiness probe event messages
	# Such as Liveness/Readiness subscriptions, and status request
	log-info = on

	liveness {
	    # List of liveness probe providers. 
	    # Custom end-user provider can be created by implementing the IProbeProvider interface.
	    providers {
		    # The default IProbeProvider implementation used for executing
		    # liveness checks inside Akka.HealthCheck 
	        default = "Akka.HealthCheck.Liveness.DefaultLivenessProvider, Akka.HealthCheck"
	        
	        # Clustering liveness check provider.
	        # To use, install the Akka.HealthCheck.Cluster NuGet package and uncomment this line.
	        #
	        #cluster = "Akka.HealthCheck.Cluster.ClusterLivenessProbeProvider, Akka.HealthCheck.Cluster"
	        
	        # Persistence liveness check provider.
	        # To use, install the Akka.HealthCheck.Persistence NuGet package and uncomment this line.
	        #
	        #persistence = "Akka.HealthCheck.Cluster.AkkaPersistenceLivenessProbeProvider, Akka.HealthCheck.Persistence"
	    }

		# Defines the signaling mechanism used to communicate with K8s, AWS, Azure,
		# or whatever the hosting environment is for the Akka.NET application. The
		# accepted values are 'file', 'tcp', and 'custom'.
		#
		# In the event of a custom transport (which is the default), Akka.HealthCheck
		# won't try to automatically report any probe data to any medium. It's up
		# to the end-user to query that data directly from the AkkaHealthCheck
		# ActorSystem extension.
		transport = custom

		# If the `transport` used is `file`, this is where we specify the path of the file
		# that we will write status data to. It's strongly recommended that you use an 
		# absolute path for best results.
		file.path = "liveness.txt"

		# If the `transport` used is `tcp`, this is where we specify the port # of the inbound
		# socket that we're going open in order to accept external healthcheck connections.
		tcp.port = 11000
	}

	readiness{
	    providers {
		    # The default IProbeProvider implementation used for executing
		    # readiness checks inside Akka.Healtcheck. Can be overridden by
		    # end-users via a custom IProbeProvider implementation. 
		    default = "Akka.HealthCheck.Readiness.DefaultReadinessProvider, Akka.HealthCheck"
	        
	        # Clustering readiness check provider.
	        # To use, install the Akka.HealthCheck.Cluster NuGet package and uncomment this line.
	        #
	        #cluster = "Akka.HealthCheck.Cluster.ClusterReadinessProbeProvider, Akka.HealthCheck.Cluster"
	    }

		# Defines the signaling mechanism used to communicate with K8s, AWS, Azure,
		# or whatever the hosting environment is for the Akka.NET application. The
		# accepted values are 'file', 'tcp', and 'custom'.
		#
		# In the event of a custom transport (which is the default), Akka.HealthCheck
		# won't try to automatically report any probe data to any medium. It's up
		# to the end-user to query that data directly from the AkkaHealthCheck
		# ActorSystem extension.
		transport = custom

		# If the `transport` used is `file`, this is where we specify the path of the file
		# that we will write status data to. It's strongly recommended that you use an 
		# absolute path for best results.
		file.path = "readiness.txt"

		# If the `transport` used is `tcp`, this is where we specify the port # of the inbound
		# socket that we're going open in order to accept external healthcheck connections.
		tcp.port = 11001
	}
}